<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Pf9JPUT/Ni41/xkWG/8TERv/Fxkr/0dOc/9aYob/Ul+F/19tjP9hcY//Sk9rm2NoeMxbZXz/W2iH/1lj
        fP9LT2b/Kyw8/zUzPv9LRU3/WlJZ/0I7Q/8kICn/EQ0W/xgVH/8cGSD/DQoN/x8YGv9HMjD/d15b/1dK
        Uf93aHL/RjlB/zwxPP9GPkf/OzQ//xAPG/8mKUL/Rk9z/1Bbgf9XaI7/Y3GT/2l4l/9TXnvLYmp861hn
        gv9YaIb/Ult0/zc+Uv82OUr/MzE8/09KVP9NR1H/KyYv/xsVHP8TEBb/Ni44/zQtNf8aExn/MSUn/1ZA
        QP+IcG7/cV5i/31uc/9fUVb/MSct/zs1QP9IQk3/Kic1/yEmRP9XYor/c4Cn/1hjiP9WYIL/aXGN/3F4
        lOtda4H8Y3OO/0xbeP9TXHf/U1hq/0dHVf9APUn/S0dT/0dCTf8oIyv/FxEX/yIbIP8wJy//QTU9/zYt
        N/9PQEr/WEdR/2hXX/91ZnD/hnd+/3Rlav8+MTf/KCEr/0U/S/82NET/IylH/11okf91fJ//PD5c/z5H
        Zf9OVnL/Ym6O+zhDVvtgbIP/YnGN/0ZTcP8/RVn/PD1L/z8+S/9EQU//RT5L/0A5RP8fGiH/IBke/yoi
        Kf84LTj/OzE//0xBUP9LQlL/V05d/3ptef98bXX/Xk9Z/y4mLf9MQUj/V09Z/0ZEVf8fIzz/Qkpw/3mG
        rP9UVXD/Rkxo/2duiv9xd5X7S1Rj7EhRZf9PXXn/JzRP/zA5Tv81N0n/NjdJ/0ZFWP8+O0z/OTM//xYS
        Fv8XEhf/Gxge/x4ZJ/8/NEX/a15v/3FmeP9SSV7/a2Fw/2NWYv9TRlP/Lycy/1JJVf9VTlz/SkdY/ycp
        Pf8kKkr/U2GL/3B9o/9aZYX/W2iJ/3OBo+tPXG3LXm2E/1Vjf/8mMUr/MThL/zM0RP8pLT//ODxR/0ND
        V/8wLDn/DwwQ/wgHCf8QDhT/KSc4/11QZP93aHz/Z1tx/19Vbv93boH/SD9L/zMqNf8eGyX/NzRE/2lk
        d/9fXG7/IiY4/xwgNf8bI0b/WmiS/3F8nf+Fk7X/g5Cxyz1MYZs1QVv/LzpU/zA7Vv8nLED/LDFE/yUs
        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
        AAPgAAAH8AAAD/gAAB/8AAA//wAA///AA/8=
</value>
  </data>
</root>